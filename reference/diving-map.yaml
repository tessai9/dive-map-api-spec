openapi: 3.0.0
info:
  title: Diving Map Book API
  version: '1.0'
  description: |-
    Diving Map Book is a collection of the diving point map.
    Summarize many diving map and use them in diving.
  contact:
    name: Tesao
servers:
  - url: 'http://localhost:3000'
tags:
  - name: user
  - name: region
  - name: point
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      operationId: get-users-userId
      description: retrieve the information of the user with the matching user ID.
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/api_key'
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          $ref: '#/components/responses/api_result'
        '400':
          $ref: '#/components/responses/api_result'
        '401':
          $ref: '#/components/responses/api_result'
        '403':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      description: update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                  format: email
                birthday:
                  type: string
                  format: date
              required:
                - first_name
                - last_name
                - email
                - birthday
            examples: {}
        description: Patch user properties to update.
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/api_key'
    delete:
      summary: Delete specified user
      operationId: delete-users-userId
      responses:
        '200':
          $ref: '#/components/responses/api_result'
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      description: logical delete specified user
      parameters:
        - $ref: '#/components/parameters/api_key'
  /user:
    post:
      summary: Create New User
      operationId: post-user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
                email:
                  type: string
                  format: email
                birthday:
                  type: string
                  format: date
              required:
                - name
                - password
                - email
                - birthday
            examples: {}
        description: Post the necessary fields for the API to create a new user.
      description: create a new user
      parameters:
        - $ref: '#/components/parameters/api_key'
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/api_result'
        '400':
          $ref: '#/components/responses/api_result'
        '401':
          $ref: '#/components/responses/api_result'
        '403':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
  /region:
    get:
      summary: All regions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      operationId: get-regions
      description: get all regions
      parameters:
        - schema:
            type: integer
          in: query
          name: prefecture
          description: prefecture code
      tags:
        - region
    parameters: []
    post:
      summary: Add new region
      operationId: post-regions
      responses:
        '200':
          $ref: '#/components/responses/api_result'
        '400':
          $ref: '#/components/responses/api_result'
        '401':
          $ref: '#/components/responses/api_result'
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      description: create region
      parameters:
        - $ref: '#/components/parameters/api_key'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                prefecture:
                  type: integer
              required:
                - name
                - prefecture
      tags:
        - region
  '/regions/{regionId}':
    parameters:
      - schema:
          type: integer
        name: regionId
        in: path
        required: true
        description: region ID
    get:
      summary: Specific region information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      operationId: get-regions-regionId
      description: get information about the region
      requestBody:
        content:
          application/json:
            schema:
              type: object
      tags:
        - region
    patch:
      summary: ''
      operationId: patch-regions-regionId
      responses:
        '200':
          $ref: '#/components/responses/api_result'
        '400':
          $ref: '#/components/responses/api_result'
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      description: update region information
      parameters:
        - $ref: '#/components/parameters/api_key'
      tags:
        - region
  '/regions/{regionId}/point':
    parameters:
      - schema:
          type: string
        name: regionId
        in: path
        required: true
    get:
      summary: All diving points
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Point'
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      operationId: get-regions-regionId-points
      description: get all diving point of specified region
      tags:
        - point
        - region
    post:
      summary: Add new diving point
      operationId: post-regions-regionId-points
      responses:
        '200':
          $ref: '#/components/responses/api_result'
        '400':
          $ref: '#/components/responses/api_result'
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      description: create diving point of the specified region
      parameters:
        - $ref: '#/components/parameters/api_key'
      tags:
        - point
        - region
  '/regions/{regionId}/points/{pointId}':
    parameters:
      - schema:
          type: string
        name: regionId
        in: path
        required: true
      - schema:
          type: string
        name: pointId
        in: path
        required: true
    get:
      summary: Specific point information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Point'
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      operationId: get-regions-regionId-points-pointId
      description: get information about the point
      tags:
        - point
        - region
    patch:
      summary: ''
      operationId: patch-regions-regionId-points-pointId
      responses:
        '200':
          $ref: '#/components/responses/api_result'
        '400':
          $ref: '#/components/responses/api_result'
        '404':
          $ref: '#/components/responses/api_result'
        '500':
          $ref: '#/components/responses/api_result'
        '503':
          $ref: '#/components/responses/api_result'
      description: update information of the point
      parameters:
        - $ref: '#/components/parameters/api_key'
      tags:
        - region
        - point
  '/regions/{regionId}/points/{pointId}/map':
    parameters:
      - schema:
          type: string
        name: regionId
        in: path
        required: true
      - schema:
          type: string
        name: pointId
        in: path
        required: true
    post:
      summary: Map Data
      operationId: post-regions-regionId-points-pointId-map
      responses:
        '200':
          description: OK
      description: add / update diving map image
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                map:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties: {}
          application/octet-stream:
            schema:
              type: object
              properties:
                map:
                  type: string
                  format: binary
        description: map image
      tags:
        - point
        - map
components:
  schemas:
    User:
      title: User
      type: object
      description: user model
      x-tags:
        - User
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        name:
          type: string
        email:
          type: string
          format: email
        birthday:
          type: string
          format: date
          example: '1997-10-31'
      required:
        - id
        - name
        - email
    Region:
      title: Region
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        prefecture:
          type: integer
      description: region model
    Point:
      title: Point
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        point_map:
          type: string
          format: uri
      description: diving point model
  parameters:
    api_key:
      name: api_key
      in: header
      required: false
      schema:
        type: string
      description: API Key
  responses:
    api_result:
      description: result of the request
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: string
                enum:
                  - ok
                  - failed
              message:
                type: string
